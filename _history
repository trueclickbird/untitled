{"entries":[{"timestamp":1726889521056,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever"],[0,"\"></"]],"start1":12,"start2":12,"length1":109,"length2":102},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"TCLDHT11.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":219,"start2":219,"length1":68,"length2":44}]},{"type":"added","filename":"TCLDHT11.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"ïƒƒ\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n\nlet dht11Humidity = 0\nlet dht11Temperature = 0\n\n/**\n * get dht11 temperature and humidity Value\n * @param dht11pin describe parameter here, eg: DigitalPin.P15\n */\n//% advanced=true\n//% blockId=\"readdht11\" block=\"value of dht11 %dht11type| at pin %dht11pin\"\nexport function dht11value(dht11type: DHT11Type, dht11pin: DigitalPin): number {\n    const DHT11_TIMEOUT = 100\n    const buffer = pins.createBuffer(40)\n    const data = [0, 0, 0, 0, 0]\n    let startTime = control.micros()\n\n    if (control.hardwareVersion().slice(0, 1) !== '1') { // V2\n        // TODO: V2 bug\n        pins.digitalReadPin(DigitalPin.P0);\n        pins.digitalReadPin(DigitalPin.P1);\n        pins.digitalReadPin(DigitalPin.P2);\n        pins.digitalReadPin(DigitalPin.P3);\n        pins.digitalReadPin(DigitalPin.P4);\n        pins.digitalReadPin(DigitalPin.P10);\n\n        // 1.start signal\n        pins.digitalWritePin(dht11pin, 0)\n        basic.pause(18)\n\n        // 2.pull up and wait 40us\n        pins.setPull(dht11pin, PinPullMode.PullUp)\n        pins.digitalReadPin(dht11pin)\n        control.waitMicros(40)\n\n        // 3.read data\n        startTime = control.micros()\n        while (pins.digitalReadPin(dht11pin) === 0) {\n            if (control.micros() - startTime > DHT11_TIMEOUT) break\n        }\n        startTime = control.micros()\n        while (pins.digitalReadPin(dht11pin) === 1) {\n            if (control.micros() - startTime > DHT11_TIMEOUT) break\n        }\n\n        for (let dataBits = 0; dataBits < 40; dataBits++) {\n            startTime = control.micros()\n            while (pins.digitalReadPin(dht11pin) === 1) {\n                if (control.micros() - startTime > DHT11_TIMEOUT) break\n            }\n            startTime = control.micros()\n            while (pins.digitalReadPin(dht11pin) === 0) {\n                if (control.micros() - startTime > DHT11_TIMEOUT) break\n            }\n            control.waitMicros(28)\n            if (pins.digitalReadPin(dht11pin) === 1) {\n                buffer[dataBits] = 1\n            }\n        }\n    } else { // V1\n        // 1.start signal\n        pins.digitalWritePin(dht11pin, 0)\n        basic.pause(18)\n\n        // 2.pull up and wait 40us\n        pins.setPull(dht11pin, PinPullMode.PullUp)\n        pins.digitalReadPin(dht11pin)\n        control.waitMicros(40)\n\n        // 3.read data\n        if (pins.digitalReadPin(dht11pin) === 0) {\n            while (pins.digitalReadPin(dht11pin) === 0);\n            while (pins.digitalReadPin(dht11pin) === 1);\n\n            for (let dataBits = 0; dataBits < 40; dataBits++) {\n                while (pins.digitalReadPin(dht11pin) === 1);\n                while (pins.digitalReadPin(dht11pin) === 0);\n                control.waitMicros(28)\n                if (pins.digitalReadPin(dht11pin) === 1) {\n                    buffer[dataBits] = 1\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 5; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (buffer[8 * i + j] === 1) {\n                data[i] += 2 ** (7 - j)\n            }\n        }\n    }\n\n    if (((data[0] + data[1] + data[2] + data[3]) & 0xff) === data[4]) {\n        dht11Humidity = data[0] + data[1] * 0.1\n        dht11Temperature = data[2] + data[3] * 0.1\n    }\n\n    switch (dht11type) {\n        case DHT11Type.DHT11_temperature_C:\n            return dht11Temperature\n        case DHT11Type.DHT11_temperature_F:\n            return (dht11Temperature * 1.8) + 32\n        case DHT11Type.DHT11_humidity:\n            return dht11Humidity\n    }\n}\n"}]},{"timestamp":1726890115406,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"TCLDHT11.ts","patch":[{"diffs":[[0,"alPin): "],[-1,"\n"],[0,"number {"]],"start1":1152,"start2":1152,"length1":17,"length2":16}]}]},{"timestamp":1726890150627,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":62}]}]},{"timestamp":1726890833936,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":250,"start2":250,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1726889521055,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1726890833939}